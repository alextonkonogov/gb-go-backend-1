openapi: 3.0.3
info:
  title: Shop
  version: 1.0.0
paths:
  /users/login:
    post:
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
  /users/logout:
    post:
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        200:
          description: successful logout
  /items:
    get:
      summary: Lists Items with filters
      operationId: ListItems
      parameters:
        - name: min_price
          in: query
          description: Minimal price
          required: false
          schema:
            type: integer
            format: int64
        - name: max_price
          in: query
          description: Maximal price
          required: false
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        400:
          description: Invalid price range
    post:
      summary: Add a new item to the store
      operationId: CreateItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        description: item info
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Invalid Item
      security:
        - api_key: []
  /items/upload_image:
    post:
      summary: uploads an image
      operationId: uploadFile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                additionalMetadata:
                  type: string
                  description: Additional data to pass to server
                file:
                  type: object
                  description: file to upload
      responses:
        200:
          description: successful operation
      security:
        - api_key: []
  /items/{itemId}:
    get:
      summary: Find item by ID
      operationId: GetItem
      parameters:
        - name: itemId
          in: path
          description: ID of item to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        400:
          description: Invalid ID supplied
    put:
      summary: Updates a item in the store with form data
      operationId: UpdateItem
      parameters:
        - name: itemId
          in: path
          description: ID of item that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the item
                price:
                  type: string
                  description: Updated price of the item
      responses:
        204:
          description: Item updated
        400:
          description: Invalid input
      security:
        - api_key: [ ]
    delete:
      summary: Deletes a item
      operationId: DeleteItem
      parameters:
        - name: itemId
          in: path
          description: Item id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Item deleted
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
      security:
        - api_key: [ ]
  /orders:
    get:
      summary: Lists orders
      operationId: ListOrders
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
      security:
        - api_key: [ ]
    post:
      summary: Place an order for a order
      operationId: placeOrder
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid Order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: order placed for purchasing the item
        required: true
      security:
        - api_key: [ ]
  '/orders/{orderId}':
    get:
      summary: Find purchase order by ID
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of item
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
      security:
        - api_key: [ ]
    put:
      summary: Updates a order in the store with form data
      operationId: UpdateOrder
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                quantity:
                  type: integer
                  format: int64
                  description: Updated name of the order
                shipDate:
                  type: string
                  format: date-time
                  description: Updated ship date of the order
                status:
                  type: string
                  description: Updated status of the order
                  enum:
                    - placed
                    - approved
                    - delivered
                complete:
                  type: boolean
                  description: Updated complete flag of the order
      responses:
        204:
          description: Item updated
        400:
          description: Invalid input
      security:
        - api_key: [ ]
    delete:
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with positive integer value.\ \
        Negative or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '204':
          description: Order deleted
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
      security:
        - api_key: [ ]
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: string
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: integer
          format: int64
        image_link:
          type: string
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        items:
          type: array
          format: int64
        quantity:
          type: integer
          format: int64
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: api_key